// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dots_to_list
List dots_to_list(DottedPair dots);
RcppExport SEXP _uneval_dots_to_list(SEXP dotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DottedPair >::type dots(dotsSEXP);
    rcpp_result_gen = Rcpp::wrap(dots_to_list(dots));
    return rcpp_result_gen;
END_RCPP
}
// is_default_
bool is_default_(RObject x);
RcppExport SEXP _uneval_is_default_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_default_(x));
    return rcpp_result_gen;
END_RCPP
}
// apply_closure_
SEXP apply_closure_(Language call, RObject fun, DottedPair args, Environment env);
RcppExport SEXP _uneval_apply_closure_(SEXP callSEXP, SEXP funSEXP, SEXP argsSEXP, SEXP envSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Language >::type call(callSEXP);
    Rcpp::traits::input_parameter< RObject >::type fun(funSEXP);
    Rcpp::traits::input_parameter< DottedPair >::type args(argsSEXP);
    Rcpp::traits::input_parameter< Environment >::type env(envSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_closure_(call, fun, args, env));
    return rcpp_result_gen;
END_RCPP
}
// find_promise
SEXP find_promise(Symbol name, Environment env);
RcppExport SEXP _uneval_find_promise(SEXP nameSEXP, SEXP envSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Symbol >::type name(nameSEXP);
    Rcpp::traits::input_parameter< Environment >::type env(envSEXP);
    rcpp_result_gen = Rcpp::wrap(find_promise(name, env));
    return rcpp_result_gen;
END_RCPP
}
// promise_expr_
SEXP promise_expr_(Promise promise);
RcppExport SEXP _uneval_promise_expr_(SEXP promiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Promise >::type promise(promiseSEXP);
    rcpp_result_gen = Rcpp::wrap(promise_expr_(promise));
    return rcpp_result_gen;
END_RCPP
}
// promise_env_
SEXP promise_env_(Promise promise);
RcppExport SEXP _uneval_promise_env_(SEXP promiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Promise >::type promise(promiseSEXP);
    rcpp_result_gen = Rcpp::wrap(promise_env_(promise));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_uneval_dots_to_list", (DL_FUNC) &_uneval_dots_to_list, 1},
    {"_uneval_is_default_", (DL_FUNC) &_uneval_is_default_, 1},
    {"_uneval_apply_closure_", (DL_FUNC) &_uneval_apply_closure_, 4},
    {"_uneval_find_promise", (DL_FUNC) &_uneval_find_promise, 2},
    {"_uneval_promise_expr_", (DL_FUNC) &_uneval_promise_expr_, 1},
    {"_uneval_promise_env_", (DL_FUNC) &_uneval_promise_env_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_uneval(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
