% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/promise.R
\name{promise}
\alias{promise}
\title{A promise}
\usage{
promise(expr)
}
\arguments{
\item{expr}{<bare \code{\link{language}}> expression to wrap in a promise.}
}
\value{
An R \emph{promise}: an object with \code{typeof(.) == "promise"}. The
\code{\link{environment}} associated with the promise will be that of the function that
called \code{promise()}.

\strong{NOTE:} Due to the fragility of \code{\link{promise}}s, it is often best to keep them
in \code{\link{arglist}}s. If you attempt to assign the results of this function
to a variable instead of passing it directly to another function, it will
likely be \link[=force]{forced} and no longer be a \code{\link{promise}}.
}
\description{
Create a promise from a bare expression. Promises are what power R's lazy
evaluation: they are objects that contain an expression and an
\code{\link{environment}} in which that expression should be executed.
}
\examples{
arglist(promise(x + 1))

}
\seealso{
\code{\link[=promise_expr]{promise_expr()}} and \code{\link[=promise_env]{promise_env()}} for extracting the expression
or environment associated with a \code{\link{promise}}.

\code{\link[=capture]{capture()}} for capturing the \code{\link{promise}} associated with a single
function argument.

\code{\link[=capture_all]{capture_all()}}, \code{\link[=capture_named]{capture_named()}}, and \code{\link[=capture_dots]{capture_dots()}} for
capturing the \code{\link{promise}}s associated with multiple function arguments.

Other promise constructors: 
\code{\link{as_promise}()},
\code{\link{new_promise}()},
\code{\link{promises}()}
}
\concept{promise constructors}
