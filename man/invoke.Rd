% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/invoke.R
\name{invoke}
\alias{invoke}
\title{Invoke a function using promises}
\usage{
invoke(
  expr,
  env = parent.frame(),
  call_env = env,
  f_expr = substitute(expr)[[1]]
)
}
\arguments{
\item{expr}{<bare \code{\link{call}}> an expression giving the function and
arguments to be called. Unlike normal function invocation, arguments will
not be automatically turned into promises, so must be wrapped in \code{\link[=promise]{promise()}}
if you wish them to be evaluated lazily. Dots can be passed using \code{...}, and
lists of arguments can be spliced in using \verb{... = <list of arguments>}.}

\item{env}{<\code{\link{environment}}> the environment to evaluate the function
definition and arguments extracted from \code{expr} in.}

\item{call_env}{<\code{\link{environment}}> environment to call \code{f} from. This will be
available as \code{\link[=parent.frame]{parent.frame()}} within \code{f}.}

\item{f_expr}{<\code{\link{language}}> an expression representing \code{f}. This is primarly
cosmetic; it does not affect what function is called, but may be used for
printing purposes and will be available as the first element of \code{\link[=sys.call]{sys.call()}}
within \code{f}.}
}
\value{
The result of evaluating the function \code{f}.
}
\description{
Call a function using arguments that may be \link{promise}s.
\code{\link[=invoke]{invoke()}} is syntactic sugar for \code{\link[=do_invoke]{do_invoke()}} that is designed to look
more like a function call and which allows splicing-in of argument lists
via assignment to \code{...}.

Currently, if \code{f} is a \code{\link{primitive}} function, \code{\link[=invoke]{invoke()}} falls back to using
\code{\link[=do.call]{do.call()}}, so \code{f_expr} cannot be used to set the call expression seen by
\code{\link[=sys.call]{sys.call()}} in \code{f}.
}
\details{
This function allows you to call another function while explicitly giving
each argument as either an already-evaluated object or as a \code{\link{promise}}.

Consider a function like this:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{f = function(...) match.call()
}\if{html}{\out{</div>}}

We can call it as follows:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{y = 2
z = 3
f(1 + 2, x = y + z)
#> f(1 + 2, x = y + z)
}\if{html}{\out{</div>}}

The standard function invocation \code{f(1, x = y + z)} creates a \code{\link{promise}} for
each argument, ensuring they are lazily evaluated by the underlying call.
Because they are not evaluated, \code{match.call()} shows the unevaluated
expressions when called.

\code{invoke()} makes the creation of argument \code{\link{promise}}e explicit, requiring
you to wrap an argument's expression in \code{\link[=promise]{promise()}} if you wish it to be
evaluated lazily. Thus, the equivalent of the above call with \code{invoke()} is:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{invoke(f(promise(1 + 2), x = promise(y + z)))
#> f(1 + 2, x = y + z)
}\if{html}{\out{</div>}}

By making construction of argument \code{\link{promise}}s explicit, we can more easily
manipulate when and how arguments are evaluated. For example, we can evaluate
arguments at call time by not wrapping them in \code{\link[=promise]{promise()}}:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{invoke(f(1 + 2, x = y + z))
#> f(3, x = 5)
}\if{html}{\out{</div>}}

Or, we can pass down an argument's \code{\link{promise}} captured via \code{\link{capture}}:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{g = function(z, ...) invoke(f(1 + 2, x = capture(z), ...))
g(z = a + b, i = j)
#> f(3, x = a + b, i = j)
}\if{html}{\out{</div>}}

Notice how \code{...} is also forwarded above, allowing the \code{i} argument to be
forwarded. Lists of arguments can also be spliced in using \verb{... = }:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{invoke(f(1 + 2, ... = list(x = y + z, i = promise(j)), m = 8))
#> f(3, x = 5, i = j, m = 8)
}\if{html}{\out{</div>}}
}
\examples{
# TODO

}
\seealso{
\code{\link[=do_invoke]{do_invoke()}}, the low-level function-calling interface used by
\code{\link[=invoke]{invoke()}}.
}
