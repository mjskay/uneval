% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autopartial.R
\name{invoke}
\alias{invoke}
\title{Invoke a function using promises}
\usage{
invoke(f, args, env = parent.frame(), f_expr = substitute(f))
}
\arguments{
\item{f}{(\link{closure} or \link{primitive}) function to call}

\item{args}{(\link{promise_list}, \link{list}, or \link{pairlist}) list of arguments
to call the function with.}

\item{env}{(\link{environment}) environment to call \code{f} from. This will be
available as \code{\link[=parent.frame]{parent.frame()}} within \code{f}.}

\item{f_expr}{(\link{language}) unevaluated expression for the function to
use when constructing the unevaluated call. This is purely cosmetic; it
does not affect what function is called, but will be available as
the first element of \code{\link[=sys.call]{sys.call()}} within \code{f}.}
}
\value{
The result of evaluating the function \code{f}.
}
\description{
Calls a function using an argument list that may contain promises.
}
\details{
This function is intended as an alternative to \code{\link[=do.call]{do.call()}} that provides
better support for promises when calling \link{closure}s. In particular,
promises in \code{args} will be left as-is, allowing precise manipulation of the
expressions and environments of the arguments to \code{f}.

When \code{f} is a \link{closure}, the name of the function in the unevaluated call
provided to \code{f} via \code{\link[=sys.call]{sys.call()}} can also be set via \code{f_expr}, making it
possible to avoid potentially-ugly captured function calls created by
\code{\link[=match.call]{match.call()}} in \code{f}.

Currently, if \code{f} is a \link{primitive} function, \code{\link[=invoke]{invoke()}} falls back to using
\code{\link[=do.call]{do.call()}}, so \code{f_expr} cannot be used to set the call expression seen by
\code{\link[=sys.call]{sys.call()}} in \code{f}.
}
\examples{
# TODO

}
