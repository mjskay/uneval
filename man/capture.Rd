% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/capture.R
\name{capture}
\alias{capture}
\title{Capture promise for one argument to a function call}
\usage{
capture(x, env = parent.frame())
}
\arguments{
\item{x}{(bare \link{symbol}) the name of the argument.}

\item{env}{(\link{environment}) the environment to search for the promise. The
default looks at the arguments passed to the function that called this one.}
}
\value{
One of:
\itemize{
\item If \code{x} refers to a promise, the promise with the given name from the
given environment. Promises whose code is itself a promise (possibly
recursively) are unwrapped so that the code referred to by the returned
promise is not also a promise.
\item If \code{x} does not refer to a promise, it is returned as-is.
}

\strong{NOTE:} Due to the fragility of \link{promise}s, it is often best to keep them in
\link{promise_list}s. If you attempt to assign the results of this function to
a variable instead of passing it directly to another function, it will
likely be \link{force}d and no longer be a \link{promise}.
}
\description{
Capture a \link{promise} representing one argument to the surrounding
function (or another function specified by \code{env}).
}
\examples{
f = function(x) capture(x)

# if we capture a raw promise, its output is not
# very informative...
f(1 + 2)

# ... we can wrap it in a promise_list to get
# more information
promise_list(f(1 + 2))

}
\seealso{
\code{\link[=capture_all]{capture_all()}}, \code{\link[=capture_named]{capture_named()}}, and \code{\link[=capture_dots]{capture_dots()}} for
capturing the \link{promise}s associated with multiple arguments.
}
